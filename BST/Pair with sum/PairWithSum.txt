Approach 2:
Better way is to store the node values in an array using inorder, as we know inorder of BST gives sorted array and then we can apply our old good two pointer approach to find 2 sum.... clear and crisp!!
class Solution {
    private:
        vector<int> ans;
    public:
    
        void inorder(TreeNode *root){
            if(root){
                inorder(root->left);
                ans.push_back(root->val);
                inorder(root->right);
            }
        }    
    
        bool binary_search(int st, int ed, int k){
            while(st<ed){
                int sum = ans[st] + ans[ed];
                if(sum  == k)
                    return true;
                else if(sum < k)
                    st++;
                else
                    ed--;
            }
            return false;
        }
    
    
        bool findTarget(TreeNode* root, int k) {
            inorder(root);
            return binary_search(0, ans.size()-1, k);
        }
};
