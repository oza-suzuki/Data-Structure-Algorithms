#include<bits/stdc++.h>
using namespace std;

class node{
    public:
    int data;
    node *next;
    
    node(int val)
    {
        data = val;
        next = NULL;
    }
};

node *head, *tail = NULL;
int size = 0;

void addLast(int val){
    node *newnode = new node(val);
    
    if(head == NULL)
    {
        head = newnode;
        tail = newnode;
    }
    else{
        tail->next = newnode;
        tail = newnode;
    }
    size++;
}

void removeFirst(){
    if(head){
        head = head->next;
        size--;
    }
    else{
        cout<<"List is empty"<<endl;
    }
}

void removeLast(){
    if(size == 0){
        cout<<"List is empty"<<endl;
    }
    
    else if(size == 1){
        head = head->next;
        head = NULL;
        tail = NULL;
        size--;
    }
    
    else{
        node *temp = head;
        for(int i = 0; i < size - 2; i++)
        {
            temp = temp->next;
        }
        temp->next = NULL;
        tail = temp;
        size--;
    }
}

void removeAt(int idx){
    if(size == 0){
        cout<<"List is empty"<<endl;
    }
    
    else if(idx < 0 || idx >= size ){
        cout<<"Invalid arguments"<<endl;
    }
    
    else if(idx == 0){
        removeFirst();
    }
    
    else if(idx == size - 1){
        removeLast();
    }
    
    else{
        node *curr = head;
        node *nxt = head;
   
        for(int i = 0; i < idx; i++){
            curr = nxt;
            nxt =  curr->next;
        }
        
        curr->next = nxt->next;
        
        size--;
    }
}

void getFirst(){
    if(head){
        cout<<head->data<<endl;
    }
    else{
        cout<<"List is empty"<<endl;
    }
}

void getLast(){
    if(tail){
        cout<<tail->data<<endl;
    }
    else{
        cout<<"List is empty"<<endl;
    }
}

void getAt(int idx){
    if(idx < size && idx >= 0)
    {
        node *temp = head;
        for(int i=0;i<idx;i++){
        temp = temp->next;
        }
        cout<<temp->data<<endl;
    }
    else{
        cout<<"Invalid arguments"<<endl;
    }

}



void addFirst(int val){
    node *newnode = new node(val);
    
    if(head == NULL)
    {
        head = newnode;
        tail = newnode;
    }
    
    else{
        newnode->next = head;
        head = newnode;
    }
    size++;
}

void addAt(int val, int idx){
    
    if(idx < 0 || idx > size){
        cout<<"Invalid arguments"<<endl;
    }

    else if(idx == 0){
        addFirst(val);
    }
    
    else if(idx == size){
        addLast(val);
    }
    
    else{
        node *newnode = new node(val);
        
        node *curr = head;
        node *prev;
        for(int i = 0; i < idx; i++){
            prev = curr;
            curr = curr->next;
        }
        newnode->next = curr;
        prev->next = newnode;
        
        size++;
    }
    
}

void display(){
    node *ptr = head;
    while(ptr)
    {
        cout<<ptr->data<<" ";
        ptr = ptr->next;
    }
    cout<<endl;
}

void reversePI(){
    
    if(size <= 1){
        return;
    }
    
    node *prv = NULL;
    node *nxt = NULL;  
    node *cur = head;
    
    while(cur != NULL)  
    {
        nxt = cur->next;
        cur->next = prv;
        prv = cur;
        cur = nxt;
    }
    
    head = prv;
    
    node *tmp = head;
    
   for(int i=0;i<size-1;i++){
       tmp = tmp->next;
   }
   
   tail = tmp;
}

void kthFromEnd(int idx){
    reversePI();
    
    node *temp = head;
    for(int i=0;i<idx;i++){
        temp = temp->next;
    }
    cout<<temp->data<<endl;
    reversePI();
}


int main()
{
    string s;
    cin>>s;
    int val;
    int idx;
    while(s != "quit"){
        
        if(s == "addLast"){
            cin>>val;
            addLast(val);
        }
        
        else if(s == "removeFirst"){
            removeFirst();
        }
        
        else if(s == "getFirst"){
            getFirst();
        }
        
        else if(s == "getLast"){
            getLast();
        }
        
        else if(s == "getAt"){
            cin>>idx;
            getAt(idx);
        }
        
        else if(s == "size"){
            cout<<size<<endl;
        }
        
        else if(s == "display"){
            display();
        }
        
        else if(s == "addFirst"){
            cin>>val;
            addFirst(val);
        }
        
        else if(s == "addAt"){
            cin>>idx;
            cin>>val;
            addAt(val, idx);
        }
        
        else if(s == "removeLast"){
            removeLast(); 
        }
        
        else if(s == "removeAt"){
            cin>>idx;
            removeAt(idx);
        }
        
        else if(s == "reversePI"){
            reversePI();
        }
        
        else if(s == "kthFromEnd"){
            cin>>idx;
            kthFromEnd(idx);
        }
        
        else if(s == "push"){
            cin>>val;
            addFirst(val);
        }
        
        else if(s == "pop"){
            if(head)
            {
                cout<<head->data<<endl;
                head = head->next;
                size--;
            }
            
            else{
                cout<<"Stack underflow"<<endl;
            }
        }
        
        else if(s == "top"){
            if(head){
                cout<<head->data<<endl;
            }
            
            else{
                cout<<"Stack underflow"<<endl;
            }
        }
        
        else if(s == "add"){
            cin>>val;
            addLast(val);
        }
        
        else if(s == "remove"){
            if(head){
                cout<<head->data<<endl;
                head = head->next;
                size--;
            }
            
            else{
                cout<<"Queue underflow"<<endl;
            }
        }
        
        else if(s == "peek"){
            if(head){
                cout<<head->data<<endl;
            }
            
            else{
                cout<<"Queue underflow"<<endl;
            }
        }
        
        cin>>s;
        
    }
    
}