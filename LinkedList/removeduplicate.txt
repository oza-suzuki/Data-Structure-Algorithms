#include<bits/stdc++.h>
using namespace std;

class node{
    public:
    int data;
    node *next;
    
    node(int val)
    {
        data = val;
        next = NULL;
    }
};

node *head, *tail = NULL;
int size = 0;

void addLast(int val){
    node *newnode = new node(val);
    
    if(head == NULL)
    {
        head = newnode;
        tail = newnode;
    }
    else{
        tail->next = newnode;
        tail = newnode;
    }
    size++;
}

void display(){
    node *ptr = head;
    while(ptr)
    {
        cout<<ptr->data<<" ";
        ptr = ptr->next;
    }
    cout<<endl;
}

void removeduplicate(){
    
    
        //1st approach
        
        node *ptr = head;
        
        while(ptr->next)
        {
            if(ptr->data == ptr->next->data)
            {
                ptr->next = ptr->next->next;
            }
            
            else{
                ptr = ptr->next;
            }
        }
        
        
        //2nd approach
        // node *prev = head;
        // node *curr = head->next;
        
        // while(curr != NULL)
        // {
        //     if(prev->data == curr->data)
        //     {
        //         prev->next = curr->next;
        //         curr = prev->next;
        //     }
        //     else
        //     {
        //         prev = curr;
        //         curr = curr->next;
        //     }
        // }
    
        //3rd approach
        
         node* prev = head;
         node* current = prev->next;
         while(current != NULL)
         {     
            if(prev->data == current->data)
            {
                prev->next = current->next;
                current = current->next;
            }
            else
            {
                prev = current;
                current = current->next;
            }
        }
}

int main()
{
    int n;
    cin>>n;
    int sz = n;
    
    while(n--){
        int val;
        cin>>val;
        addLast(val);
    }
    
    display();
    // cout<<size<<endl;
    removeduplicate();
    display();
}


