class Solution {
public:
    //Better
    
    int binarySearchRowSelect(vector<vector<int>>& matrix, int target){

                int n = matrix.size(),
                    m = matrix[0].size();

                int low = 0,
                    mid = 0,
                    high = n - 1;

                //finding pot row.
                while(low <= high)
                {
                    mid = (low + high) / 2;

                    if(matrix[mid][0] <= target && target <= matrix[mid][m-1])
                    {
                        return mid;
                    }

                    else if(matrix[mid][0] > target){
                        high = mid - 1;
                    }

                     else if(matrix[mid][0] < target){
                        low = mid + 1;
                    }
                }
                
        return -1;
    }
    
    bool binarySearch(vector<vector<int>>& matrix, int row ,int target){
        
        //if (!matrix.size() || !matrix[0].size()) return false;
        
        int n = matrix.size(),
            m = matrix[0].size();
        
        int low = 0,
            mid = 0,
            high = m - 1;
            
            while(low <= high)
            {
                mid = (low + high) / 2;
                
                if(matrix[row][mid] == target)
                {
                    return true;
                }
                
                else if(matrix[row][mid] < target)
                {
                    low = mid + 1;
                }
                
                else if(matrix[row][mid] > target)
                {
                    high = mid - 1;
                }
            }
        
        return false;
    }
    
    
    
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        
        int row = binarySearchRowSelect(matrix, target);
        if(row != -1)
        {  
            bool isFound = binarySearch(matrix, row, target);
            return isFound;
        }
        
        return false;
    }
};