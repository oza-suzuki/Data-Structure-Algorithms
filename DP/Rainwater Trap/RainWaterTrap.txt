

//Brute
class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        int maxWater = 0;
        
        for(int i=0;i<n;i++){
            
            int left = 0, right = 0;
            
            //Maximum from Left Side
            left = height[i];
            for(int j=0;j<i;j++){
                left = max(left, height[j]);
            }
            
            //Maximum from Right Side
            right = height[i];
            for(int j=i+1;j<n;j++){
                right = max(right, height[j]);
            }
            
            //End logic
            maxWater += (min(left, right) - height[i]);
        }
        
        return maxWater;
    }
};



//Better
class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        int maxWater = 0;
        
        vector<int>left(n);
        //Maximum from Left Side
        left[0] = height[0];
        for(int j=1;j<n;j++){
            left[j] = max(left[j-1], height[j]);
        }
        
        vector<int>right(n);
        //Maximum from Right Side
        right[n-1] = height[n-1];
        for(int j=n-2;j>=0;j--){
            right[j] = max(right[j+1], height[j]);
        }
        
        
        for(int i=0;i<n;i++){
            
            //End logic
            maxWater += (min(left[i], right[i]) - height[i]);
            
        }
        
        return maxWater;
    }
};


//Optimal
class Solution {
public:
    int trap(vector<int>& height) {
        int n = height.size();
        int maxWater = 0;
        
        int left_max = 0, right_max = 0;
        
        int low = 0, high = n - 1;
        
        while(low <= high){
            if(height[low] < height[high]){
                if(height[low] > left_max){
                    left_max = height[low];
                }
                else{
                    maxWater += left_max - height[low];
                }
                low++;
            } 
            else{
                if(height[high] > right_max){
                    right_max = height[high];
                }
                else{
                    maxWater += right_max - height[high];
                }
                high--;
            }
        }
        
        return maxWater;
    }
};